---
defaults:
  - _self_
  - task: mnist_large_and_small
  - fed: mnist_small_samples
  - strategy: ???
  - dataset: mnist_large_and_small

# If checkpointing is enabled,
# you may wish to save results to the same directory
# just change the dir to {your_output_directory}

hydra:
  mode: MULTIRUN
  sweep:
    dir: multirun/large_and_small
    subdir: ${strategy.name}/seed-${fed.seed}
  sweeper:
    params:
      strategy: fedavg, fedadagrad, fedadam, feddc, feddc_5, fedyogi, feddcw, feddcw_5
      fed.seed: 1336,1337,1338
      fed.num_rounds: 100


# Working dir to save temporary files to
# If null, defaults to hydra_dir/working
working_dir: null

# List of file patterns to be saved from working_dir
# at the end of training
to_save_once: [yaml, log, wandb]

# List of file patterns to be saved repeatedly
to_save_per_round: [rng, history]

# The frequency with which they should be saved
save_frequency: 1

# List of files to be copied over to the working dir
# from the results dir when using checkpoints
# all the crucial components (rng, parameters, history)
# are handled separately
to_restore: []

# List of file patterns to be deleted
# prior to and at the end of training from working_dir
to_clean_once: [history, parameters, yaml, log, rng, history]

# Control wandb logging
use_wandb: false

# Test without Ray to enable easy error detection
debug_clients:
  all: false
  one: true

# If to automatically resume wandb runs
wandb_resume: true

# The id of the wandb run to resume
# If null and wandb_resume, tries to detect
# the wandb_id from the hydra config files
# if using checkpointing, otherwise
# creates a new run
wandb_id: null

# Wandb configuration
# add whatever tags you like
# change the name
wandb:
  setup:
    project: template
    tags: ['strategy_${strategy.name}', 'seed_${fed.seed}']
    entity: null
    mode: online

# For Ray cluster usage
# leave null unless you need
# multiple ray instances running
ray_address: null
ray_redis_password: null
ray_node_ip_address: null

# When using checkpointing
# automatically detect the most recent checkpoint
# checks at most file_limit files up to depth 2
# from the results directory
# if null checks all files
file_limit: 250
